const express = require("express");
const { AccessToken } = require("livekit-server-sdk");
const cors = require("cors");

const app = express();

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.use(
  cors({
    origin: [
      "http://localhost:5173", // Vite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      "http://localhost:5174", // Vite –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç
      "http://localhost:3000", // React/Next.js
      "http://127.0.0.1:5173", // –õ–æ–∫–∞–ª—å–Ω—ã–π IP
      "http://127.0.0.1:5174", // –õ–æ–∫–∞–ª—å–Ω—ã–π IP –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
      "http://127.0.0.1:3000", // –õ–æ–∫–∞–ª—å–Ω—ã–π IP React
      "http://95.31.212.251:5173", 
    ],
    credentials: true,
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization", "Accept"],
  })
);

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", req.headers.origin);
  res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
  res.header(
    "Access-Control-Allow-Headers",
    "Content-Type, Authorization, Accept"
  );
  res.header("Access-Control-Allow-Credentials", "true");

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === "OPTIONS") {
    res.sendStatus(200);
    return;
  }

  next();
});

app.use(express.json());

// –í–ê–ñ–ù–û: –≠—Ç–∏ –∫–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –≤–∞—à–∏–º livekit.yaml
const API_KEY = "devkey"; // üëà –í–∞—à API –∫–ª—é—á –∏–∑ livekit.yaml
const API_SECRET = "secretsecretsecretsecretsecretsecret"; // üëà –í–∞—à API —Å–µ–∫—Ä–µ—Ç –∏–∑ livekit.yaml

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const timestamp = new Date().toLocaleTimeString();
  console.log(
    `[${timestamp}] ${req.method} ${req.path} - Origin: ${
      req.headers.origin || "–Ω–µ —É–∫–∞–∑–∞–Ω"
    }`
  );
  next();
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
app.post("/getToken", (req, res) => {
  try {
    const { room, username, permissions = {} } = req.body;

    console.log("üìù –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞:", { room, username, permissions });

    if (!room || !username) {
      console.log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
      return res.status(400).json({
        error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å room –∏ username",
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
    const token = new AccessToken(API_KEY, API_SECRET, {
      identity: username,
      ttl: "10m", // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    token.addGrant({
      room: room,
      roomJoin: true,
      canPublish: permissions.canPublish !== false,
      canSubscribe: permissions.canSubscribe !== false,
      canPublishData: permissions.canPublishData !== false,
      canUpdateMetadata: permissions.canUpdateMetadata || false,
    });

    const jwt = token.toJwt();

    console.log("‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è:", { room, username });

    res.json({
      token: jwt,
      expires: Date.now() + 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
    res.status(500).json({
      error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞",
      details: error.message,
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get("/health", (req, res) => {
  console.log("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞");
  res.json({
    status: "ok",
    timestamp: new Date().toISOString(),
    server: "LiveKit Token Server",
    version: "1.0.0",
    cors: {
      origin: req.headers.origin || "–Ω–µ —É–∫–∞–∑–∞–Ω",
      allowed: true,
    },
    livekit: {
      apiKey: API_KEY,
      serverUrl: "ws://localhost:7880",
    },
  });
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get("/", (req, res) => {
  console.log("‚ÑπÔ∏è –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ");
  res.json({
    message: "LiveKit Token Server",
    version: "1.0.0",
    status: "running",
    cors: {
      enabled: true,
      allowedOrigins: [
        "http://localhost:5173",
        "http://localhost:5174",
        "http://localhost:3000",
        "http://127.0.0.1:5173",
        "http://127.0.0.1:5174",
        "http://127.0.0.1:3000",
        "http://95.31.212.251:5173",
      ],
    },
    endpoints: {
      "/": "GET - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ",
      "/health": "GET - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞",
      "/getToken": "POST - –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞",
    },
    config: {
      apiKey: API_KEY,
      livekitServer: "ws://localhost:7880",
      port: process.env.PORT || 3001,
    },
    usage: {
      getToken: {
        method: "POST",
        url: "/getToken",
        body: {
          room: "–Ω–∞–∑–≤–∞–Ω–∏–µ-–∫–æ–º–Ω–∞—Ç—ã",
          username: "–∏–º—è-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          permissions: {
            canPublish: true,
            canSubscribe: true,
            canPublishData: true,
          },
        },
      },
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ 404
app.use("*", (req, res) => {
  console.log("‚ùå 404 - –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", req.originalUrl);
  res.status(404).json({
    error: "–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
    path: req.originalUrl,
    availableEndpoints: ["/", "/health", "/getToken"],
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error("üí• –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
  res.status(500).json({
    error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    message: error.message,
  });
});

const PORT = process.env.PORT || 3001;

// Graceful shutdown
process.on("SIGINT", () => {
  console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...");
  process.exit(0);
});

process.on("SIGTERM", () => {
  console.log("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...");
  process.exit(0);
});

app.listen(PORT, () => {
  console.log("=".repeat(60));
  console.log("üöÄ LiveKit Token Server –∑–∞–ø—É—â–µ–Ω!");
  console.log("=".repeat(60));
  console.log("üì° –ü–æ—Ä—Ç:", PORT);
  console.log("üåê URL:", `http://localhost:${PORT}`);
  console.log("üîë API Key:", API_KEY);
  console.log(
    "üîê API Secret:",
    API_SECRET ? "***" + API_SECRET.slice(-4) : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
  );
  console.log("üì∫ LiveKit Server:", "ws://localhost:7880");
  console.log("");
  console.log("üåç CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è:");
  console.log("  - http://localhost:5173 (Vite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)");
  console.log("  - http://localhost:5174 (Vite –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)");
  console.log("  - http://localhost:3000 (React/Next.js)");
  console.log("  - http://127.0.0.1:5173");
  console.log("  - http://127.0.0.1:5174");
  console.log("");
  console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:");
  console.log("  GET  / - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ");
  console.log("  GET  /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
  console.log("  POST /getToken - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞");
  console.log("");
  console.log("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C");
  console.log("=".repeat(60));
});
